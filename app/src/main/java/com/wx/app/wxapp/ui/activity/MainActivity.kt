package com.wx.app.wxapp.ui.activityimport android.os.Bundleimport android.support.v4.app.Fragmentimport android.support.v4.app.FragmentPagerAdapterimport android.support.v4.view.ViewPagerimport com.ashokvarma.bottomnavigation.BottomNavigationBarimport com.ashokvarma.bottomnavigation.BottomNavigationItemimport com.will.weiyuekotlin.utils.StatusBarUtilimport com.wx.app.wxapp.Rimport com.wx.app.wxapp.ui.activity.base.BaseActivityimport com.wx.app.wxapp.ui.fragment.HomeFragmentimport com.wx.app.wxapp.ui.fragment.MineFragmentimport com.wx.app.wxapp.ui.fragment.RecommendFragmentimport com.wx.app.wxapp.ui.fragment.RecreationFragmentimport kotlinx.android.synthetic.main.activity_main.*import java.util.*class MainActivity : BaseActivity() {    private var currIndex: Int = 0    private val mainBottomName: Array<String> = arrayOf("首页", "娱乐", "推荐", "我的")    private val mainBottomIcon: IntArray = intArrayOf(R.drawable.ic_favorite, R.drawable.ic_gavel, R.drawable.ic_grade, R.drawable.ic_group_work)    private val mainFragment = ArrayList<Fragment>()    override fun initView() {        initContent()        initSlide()    }    override fun initDate() {    }    override fun layoutId(): Int = R.layout.activity_main    private fun initContent() {        mainFragment.add(HomeFragment())        mainFragment.add(RecreationFragment())        mainFragment.add(RecommendFragment())        mainFragment.add(MineFragment())        vp_content.offscreenPageLimit = 4        vp_content.adapter = object : FragmentPagerAdapter(supportFragmentManager) {            override fun getItem(position: Int): Fragment = mainFragment[position]            override fun getCount(): Int = mainFragment.size        }        vp_content.addOnPageChangeListener(object :ViewPager.OnPageChangeListener{            override fun onPageScrollStateChanged(state: Int) {            }            override fun onPageScrolled(position: Int, positionOffset: Float, positionOffsetPixels: Int) {            }            override fun onPageSelected(position: Int) {                bottom_navigation_bar.selectTab(position)            }        })        vp_content.setNoScroll(true)        initBottomTab()        //状态栏透明和间距处理//        StatusBarUtil.darkMode(this)//        StatusBarUtil.setPaddingSmart(this, toolbar)    }    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        if (savedInstanceState != null) {            currIndex = savedInstanceState.getInt("currTabIndex")        }        bottom_navigation_bar.selectTab(currIndex)    }    override fun onSaveInstanceState(outState: Bundle?) {        outState?.putInt("curr_index", currIndex)        super.onSaveInstanceState(outState)    }    private fun initBottomTab() {        for (i in 0 until mainFragment.size) {            bottom_navigation_bar.addItem(BottomNavigationItem(mainBottomIcon[i], mainBottomName[i]))        }        bottom_navigation_bar.isAutoHideEnabled = true        bottom_navigation_bar.initialise()        bottom_navigation_bar.setTabSelectedListener(object : BottomNavigationBar.OnTabSelectedListener {            override fun onTabSelected(position: Int) {                currIndex = position                vp_content.currentItem = currIndex            }            override fun onTabUnselected(position: Int) {            }            override fun onTabReselected(position: Int) {            }        })    }    private fun initSlide() {    }    override fun setStatusBar() {        var mStatusBarColor = resources.getColor(R.color.colorAccent)        StatusBarUtil.setDrawerLayoutAndNoTitle(this,  drawer_main, mStatusBarColor, StatusBarUtil.DEFAULT_STATUS_BAR_ALPHA);    }}